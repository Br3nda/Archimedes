<?php

include_once('archimedes_drupal_site.features.inc');

/**
  * Implementation of hook_cron().
  */
function archimedes_drupal_site_cron() {
  archimedes_drupal_site_project_updates();
}

/**
  * Implementation of hook_block().
  * @param string $op one of "list", "view", "save" and "configure"
  * @param integer $delta code to identify the block
  * @param array $edit only for "save" operation
  */
function archimedes_drupal_site_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == 'list') {
    // Generate listing of blocks from this module, for the admin/block page
    $block = array();
    $block[0]['info'] = t('Drupal Modules');
    $block[1]['info'] = t('Drupal Growth');
    return $block;
  }
  elseif ($op == 'view') {

    $content = '';
    $subject = '';

    switch ($delta) {
      case 0:
        if (arg(0) == 'node' && is_numeric(arg(1))) {
          $node = node_load(arg(1));
          $content = archimedes_drupal_site_modules($node);
        }
        break;
      case 1:
        if(arg(0) == 'node' && is_numeric(arg(1)) && ! arg(2)) {
          $node = node_load(arg(1));

          // drupal growth graph
          $nodes = $users = $times = $xdates = array();
          $query = db_query(sprintf("SELECT last_update.field_last_update_value AS timestamp, user_table.field_num_users_value AS users, content_drupal.field_drupal_nodes_value AS nodes FROM {content_field_last_update} last_update LEFT JOIN {content_field_num_users} user_table ON last_update.vid=user_table.vid LEFT JOIN {content_type_drupal} content_drupal ON last_update.vid=content_drupal.vid WHERE last_update.nid = %s ORDER BY last_update.vid",$node->nid));
          while ($object = db_fetch_object($query)) {
            $nodes[] = $object->nodes;
            $users[] = $object->users;
            $times[] = strtotime($object->timestamp);
          }

          $canvas = charts_graphs_get_graph('google-charts');
          $canvas->title = "Drupal Growth";
          $canvas->type = "line";
          $canvas->width = 600;
          $canvas->height = 300;
          $canvas->series = array(
            'Content' => $nodes,
            'Users' => $users,
          );

          $i = 0;
          $formats = array('j', 'M', 'Y');
          while ($i < 3) {
            $xdates = array();
            foreach($times as $time) {
              $xdates[] = date($formats[$i],$time);
            }
            $xdates = array_unique ($xdates);
            if (count($xdates) < 15)
              break;
            $i++;
          }
          $canvas->x_labels = $xdates;

          $subject = t('Drupal Growth');
          $content = $canvas->get_chart();
        }
        break;
    }
  }
  $block['subject'] = $subject;
  $block['content'] = $content;
  return $block;
}

/**
  * Implementation of hook_theme()
  */
function archimedes_drupal_site_theme(){
  return array(
    'archimedes_drupal_site_module_report' => array(
      'arguments' => array('form' => NULL),
    ),
  );
}

function archimedes_drupal_site_type($node) {
  return $node->type == 'drupal';
}

function archimedes_drupal_site_modules($node) {
  module_load_include('inc', 'archimedes_drupal_site', 'archimedes_drupal_site.update');
  module_load_include('inc', 'archimedes_drupal_site', 'archimedes_drupal_site.theme');
  module_load_include('inc', 'update', 'update.report');
  if ($node->type == 'drupal') {
    $header = array('Module', 'Version', 'Latest Version');
    $mod_vids = $node->field_drupal_mod;
    $theme_vids = $node->field_drupal_theme;
    $modules = array();
    $available_mod = array();
    //first process modules
    foreach ($mod_vids as $vid) {
      $vid = $vid['vid'];
      if($vid != null)  {
        $module = node_load(array('type' => 'drupal_module'),$vid);
        $modules[] = $module;
        $cached_data = archimedes_drupal_site_archimedes_cache_get($module);
        $available[$cached_data->data['short_name']] = $cached_data->data;
      }
    }
    //then process themes
    foreach ($theme_vids as $vid) {
      $vid = $vid['vid'];
      if($vid != null)  {
        $theme = node_load(array('type' => 'drupal_theme'),$vid);
        $modules[] = $theme;
        $cached_data = archimedes_drupal_site_archimedes_cache_get($theme);
        $available[$cached_data->data['short_name']] = $cached_data->data;
      }
    }
    $projects = archimedes_drupal_site_calculate_project_data($available, $modules);
    return theme('archimedes_drupal_site_module_report', $projects);
  }
}


/**
 * Find module project updates
 */
function archimedes_drupal_site_project_updates() {
  $key = db_result(db_query("SELECT cid FROM {cache_arch_drupal} ORDER BY created ASC"));
  $data = cache_get($key,'cache_arch_drupal');
  archimedes_drupal_site_archimedes_cache_set($data->data['release_url'],$key,$data->data['short_name']);
}


/**
 * Implementation of hook_archimedes_server_plugins().
 */
function archimedes_drupal_site_archimedes_server_plugins() {
  return array(
    'drupal-module',
  );
}

/**
 * Update cache with data from module release URL
 */
function archimedes_drupal_site_archimedes_cache_set($url,$key,$project) {
  module_load_include('inc', 'update', 'update.fetch');

  $data = array();

  $xml = drupal_http_request($url);
  if(isset($xml->data)) {
    $data[] = $xml->data;
    $parser = new update_xml_parser;
    $available = $parser->parse($data);
    if (!empty($available) && is_array($available[$project])) {
      $available[$project]['release_url'] = $url;
      cache_set($key,$available[$project],'cache_arch_drupal');
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Implementation of archimedes_site_alter
 */
function archimedes_drupal_site_archimedes_site_alter(&$node) {

  if ($version = $node->field_drupal_version[0]['value']) {
    $tid = '';
    switch (substr($version,0,1)) {
      case '5':
        $tid = taxonomy_get_term_by_name('5.x');
        break;
      case '6':
        $tid = taxonomy_get_term_by_name('6.x');
        break;
      case '7':
        $tid = taxonomy_get_term_by_name('7.x');
        break;
    }
    // must save node first before adding taxonomy
    node_save($node);

    taxonomy_node_save($node,$tid);
  }
}

